
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA COMMENT EQUALS FALSE FLOAT ID INTEGER LBRACKET LPAREN PRINT RBRACKET RPAREN SEMICOLON STR TRUEbody : body sentence\n            | sentencesentence : PRINT LPAREN print_args RPAREN SEMICOLON\n                | ID EQUALS factor SEMICOLON\n                | COMMENTprint_args : print_args COMMA factor\n                  | factorfactor : LBRACKET elementos RBRACKETelementos : elementos COMMA factor\n                 | factor\n                 | emptyfactor : INTEGER\n              | FLOAT\n              | STR\n              | TRUE\n              | FALSE\n              | IDempty :'
    
_lr_action_items = {'PRINT':([0,1,2,5,6,24,25,],[3,3,-2,-5,-1,-4,-3,]),'ID':([0,1,2,5,6,7,8,11,20,24,25,28,],[4,4,-2,-5,-1,17,17,17,17,-4,-3,17,]),'COMMENT':([0,1,2,5,6,24,25,],[5,5,-2,-5,-1,-4,-3,]),'$end':([1,2,5,6,24,25,],[0,-2,-5,-1,-4,-3,]),'LPAREN':([3,],[7,]),'EQUALS':([4,],[8,]),'LBRACKET':([7,8,11,20,28,],[11,11,11,11,11,]),'INTEGER':([7,8,11,20,28,],[12,12,12,12,12,]),'FLOAT':([7,8,11,20,28,],[13,13,13,13,13,]),'STR':([7,8,11,20,28,],[14,14,14,14,14,]),'TRUE':([7,8,11,20,28,],[15,15,15,15,15,]),'FALSE':([7,8,11,20,28,],[16,16,16,16,16,]),'RPAREN':([9,10,12,13,14,15,16,17,26,27,],[19,-7,-12,-13,-14,-15,-16,-17,-6,-8,]),'COMMA':([9,10,11,12,13,14,15,16,17,21,22,23,26,27,29,],[20,-7,-18,-12,-13,-14,-15,-16,-17,28,-10,-11,-6,-8,-9,]),'RBRACKET':([11,12,13,14,15,16,17,21,22,23,27,29,],[-18,-12,-13,-14,-15,-16,-17,27,-10,-11,-8,-9,]),'SEMICOLON':([12,13,14,15,16,17,18,19,27,],[-12,-13,-14,-15,-16,-17,24,25,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,],[1,]),'sentence':([0,1,],[2,6,]),'print_args':([7,],[9,]),'factor':([7,8,11,20,28,],[10,18,22,26,29,]),'elementos':([11,],[21,]),'empty':([11,],[23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> body sentence','body',2,'p_body','main.py',6),
  ('body -> sentence','body',1,'p_body','main.py',7),
  ('sentence -> PRINT LPAREN print_args RPAREN SEMICOLON','sentence',5,'p_sentence','main.py',12),
  ('sentence -> ID EQUALS factor SEMICOLON','sentence',4,'p_sentence','main.py',13),
  ('sentence -> COMMENT','sentence',1,'p_sentence','main.py',14),
  ('print_args -> print_args COMMA factor','print_args',3,'p_print_args','main.py',19),
  ('print_args -> factor','print_args',1,'p_print_args','main.py',20),
  ('factor -> LBRACKET elementos RBRACKET','factor',3,'p_factor_list','main.py',25),
  ('elementos -> elementos COMMA factor','elementos',3,'p_elementos','main.py',30),
  ('elementos -> factor','elementos',1,'p_elementos','main.py',31),
  ('elementos -> empty','elementos',1,'p_elementos','main.py',32),
  ('factor -> INTEGER','factor',1,'p_factor_valor','main.py',37),
  ('factor -> FLOAT','factor',1,'p_factor_valor','main.py',38),
  ('factor -> STR','factor',1,'p_factor_valor','main.py',39),
  ('factor -> TRUE','factor',1,'p_factor_valor','main.py',40),
  ('factor -> FALSE','factor',1,'p_factor_valor','main.py',41),
  ('factor -> ID','factor',1,'p_factor_valor','main.py',42),
  ('empty -> <empty>','empty',0,'p_empty','main.py',47),
]
